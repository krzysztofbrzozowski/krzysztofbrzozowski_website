"""
Django settings for krzysztofbrzozowski project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get('SECRET_KEY_KB')
with open("/app/bin/secret_key.txt") as f:
    SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if os.environ.get('DEBUG') == 'true':
    DEBUG = True

if DEBUG:
    ALLOWED_HOSTS = ['*']

else:
    ALLOWED_HOSTS = [
        'krzysztofbrzozowski.com',
        'www.krzysztofbrzozowski.com']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',

    'ckeditor',
    'ckeditor_uploader',

    'core',
    'posts',
    'projects',
]

CKEDITOR_UPLOAD_PATH = ''
CKEDITOR_CONFIGS = {
    'default': {
        'allowedContent': True,
        'toolbar': 'Custom',
        'height': 400,
        'width': '90%',

        'toolbar_Custom': [
            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker', 'Undo', 'Redo'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Flash', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['Smiley', 'SpecialChar'], ['Source'], ['CodeSnippet'], ['Stylesheetparser'], ['Youtube'],
        ],

        'external_plugin_resources': [('youtube', '/static/vendor/ckeditor_plugins/youtube/youtube/', 'plugin.js')],
        'extraPlugins': ','.join(['codesnippet', 'stylesheetparser', 'youtube']),
        'contentsCss': ['/static/css/custom_style.css', 
            '/static/css/ckeditor_config.css', 
            '/static/vendor/bootstrap/css/bootstrap-grid.min.css', 
            '/static/vendor/bootstrap/css/bootstrap.min.css'],

    },
    'special': {
        'toolbar': 'Special',
        'toolbar_Special': [
            ['Bold'], ['CodeSnippet'], # < here
        ],
    'extraPlugins': 'codesnippet', # < here
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'htmlmin.middleware.HtmlMinifyMiddleware',
    'htmlmin.middleware.MarkRequestMiddleware',
]

ROOT_URLCONF = 'krzysztofbrzozowski.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'krzysztofbrzozowski.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


if os.environ.get('PRODUCTION') == 'true':
    with open(os.environ.get('POSTGRES_DATABASE_FILE')) as f:
        POSTGRES_DATABASE = f.read().strip()
    with open(os.environ.get('POSTGRES_USERNAME_FILE')) as f:
        POSTGRES_USERNAME = f.read().strip()
    with open(os.environ.get('POSTGRES_PASSWORD_FILE')) as f:
        POSTGRES_PASSWORD = f.read().strip()

    DATABASES = {
        'default': {
            'ENGINE':   'django.db.backends.postgresql',
            'HOST':     os.environ.get('DB_HOST'),
            'NAME':     POSTGRES_DATABASE,
            'USER':     POSTGRES_USERNAME,
            'PASSWORD': POSTGRES_PASSWORD,
        }
    }

if os.environ.get('PRODUCTION') == 'false':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Poland'

USE_I18N = False

USE_L10N = True

USE_TZ = False

SITE_ID = 1


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Content configuration
POST_PER_PAGE = 6

DEFAULT_PAGE_NAME = 'Krzysztof Brzozowski | programming, electronics, passion'

# Multiline Django Template Tags
import re
from django.template import base
base.tag_re = re.compile(base.tag_re.pattern, re.DOTALL)